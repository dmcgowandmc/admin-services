---
#Configure the base packages, mount the EFS and determine if jenkins installation already exists on EFS or not
#IMPORTANT: We want a primary / failover configuration where if a host fails, a new one in it's place will pick up the installation in the EFS and pick up from there. To make this work, all wuser data will be stored in /opt/jenkins_data on EFS mount
#All of these tasks will be run locally
- hosts: adminstack
  tasks:
  - name: "Install unzip"
    apt:
      name: unzip
      state: present
  - name: "Install rsync"
    apt:
      name: rsync
      state: present
  - name: "Install curl"
    apt:
      name: curl
      state: present
  - name: "Install Open JDK 1.8"
    apt:
      name: openjdk-8-jdk
      state: present
  - name: "Install nfs-common"
    apt:
      name: nfs-common
      state: present
  - name: "Download Cloudwatch Agent"
    get_url:
      url: https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
      dest: /root/awslogs-agent-setup.py
      mode: 0744
  - name: "Install Cloudwatch Agent" #Should eventually build a module
    command: python /root/awslogs-agent-setup.py --region {{ region }} -n -c {{ playbook_dir }}/module_utils/awslogs.conf
  - name: "Get Jenkins IO Key"
    get_url:
      url: "https://pkg.jenkins.io/debian/jenkins.io.key"
      dest: "{{ playbook_dir }}/jenkins.io.key"
  - name: "Add Jenkins IO Key"
    apt_key:
      file: "{{ playbook_dir }}/jenkins.io.key"
      state: present
  - name: "Add Jenkins Repository"
    apt_repository:
      repo: "deb http://pkg.jenkins.io/debian-stable binary/"
      filename: "jenkins.list"
      state: present
  - name: "Install Jenkins"
    apt:
      name: jenkins
      update_cache: yes
      state: present
  - name: "Stop Jenkins"
    service:
      name: jenkins
      state: stopped
  - name: "Jenkins Config - Create Directory"
    file:
      path: /opt/jenkins_data
      state: directory
      mode: 0755
      owner: jenkins
      group: jenkins
  - name: "Jenkins Config - Mount EFS" #NOTE: NEED TO LOOK AT REPLACEING WITH ANSIBLE MOUNT MODULE
    command: "mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 {{ efsfqdn }}.efs.{{ region }}.amazonaws.com:/ /opt/jenkins_data"
  - name: "Jenkins Config - Alter Permission Upload"
    file:
      path: /opt/jenkins_data
      state: directory
      owner: jenkins
      group: jenkins
      mode: 0755
  - name: "Jenkins Config - Change Home Directory"
    lineinfile:
      line: "JENKINS_HOME=/opt/jenkins_data"
      regexp: "^JENKINS_HOME="
      dest: "/etc/default/jenkins"
      state: present
  - name: "Jenkins Config - Check if Installation Already Exists"
    find:
      path: "/opt/jenkins_data"
    register: jenkins_data
  - name: "Jenkins Config - Install Exists - Start Jenkins Service"
    service:
      name: jenkins
      state: started
    when: jenkins_data.files|length > 0
  - name: "Jenkins Config - Install Exists - Terminate. Not further action required"
    fail:
      msg: "Existing Install. Stopping. Note we haven't actually failed but other attempts to stop the scripts don't seem to work. So don't freak out about this message"
    when: jenkins_data.files|length > 0
  - name: "Jenkins Config - No Install - Start Jenkins Service with Setup Wizard"
    service:
      name: jenkins
      state: started
  - name: "Jenkins Config - No Install - Pause to allow startup to initilize all files"
    pause:
      seconds: 20
  - name: "Jenkins Config - No Install - Setup Default Configuration"
    jenkinscfg.py:
      username: "{{ username }}"
      password: "{{ password }}"
      email: "{{ email }}"
  - name: "Download Cloudwatch Agent"
    get_url:
      url: https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
      dest: /root/awslogs-agent-setup.py
      mode: 0744
  - name: "Install Cloudwatch Agent" #Should eventually build a module
    command: python /root/awslogs-agent-setup.py --region ap-southeast-2 -n -c /root/webinit/module_utils/awslogs.conf

#This script will complete the setup of AWS components we couldn't complete in the init cloud formation template
- include: init-aws.yml

#ansible-playbook -i inventory/adminstack init-aws.yml --extra-vars "efsfqdn=<efsfqdn> username=<rootuname> password=<rootpw> email=<rootemail> stackname=<stackname> region=<aws-region>" -vvvv
