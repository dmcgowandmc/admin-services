#NEED TO FILTER ROLE RESULTS AND GET ROLE IAM
#This script will init the aws components we couldn't setup using cloud formation templates. It will then apply an updated cloud formation tempalte utilizating these components and other stack components we could use before. Once completed it will clean up anything
#temporary we created and re-init jenkins
#All of tese tasks will be run locally
#IMPORTANT : Due to limitations with this version of ansible, I have had to use the CLI functionality to perform these tasks which is very error prone. This playbook will eventually need to be re-written
- hosts: adminstack
  vars:
    region: ap-southeast-2
  tasks:
  - name: "Create Policy CloudFormationAdditionalAccess" #Policy Creation not supported on this version of ansible. Using aws cli to create policy. And have to use ignore errors flag to so not to trip up if already exists
    command: aws iam create-policy --policy-name CloudFormationAdditionalAccess --policy-document file://module_utils/CloudFormationAdditionalAccess.json
    register: cloudformationadditionalaccess
    ignore_errors: true
  - name: "Set Policy CloudFormationAdditionalAccess Fact"
    set_fact:
      CloudFormationAdditionalAccessJson: "{{ cloudformationadditionalaccess.stdout | from_json }}"
    ignore_errors: true
  - name: "Create Policy CloudWatchUpload"
    command: aws iam create-policy --policy-name CloudWatchUpload --policy-document file://module_utils/CloudWatchUpload.json
    register: CloudWatchUpload
    ignore_errors: true
  - name: "Set Policy CloudWatchUpload Fact"
    set_fact:
      CloudWatchUploadJson: "{{ CloudWatchUpload.stdout | from_json }}"
    ignore_errors: true
  - name: "Create {{ stackname }}-iam-role-admin-ec2 role"
    command: "aws iam create-role --role-name {{ stackname }}-iam-role-admin-ec2 --assume-role-policy-document file://module_utils/ec2role.json"
    ignore_errors: true
  - name: "Create {{ stackname }}-iam-role-utilities-ec2 role"
    command: "aws iam create-role --role-name {{ stackname }}-iam-role-utilities-ec2 --assume-role-policy-document file://module_utils/ec2role.json"
    ignore_errors: true
  - name: "Create {{ stackname }}-iam-role-utilities-db role"
    command: "aws iam create-role --role-name {{ stackname }}-iam-role-utilities-db --assume-role-policy-document file://module_utils/ec2role.json"
    ignore_errors: true
  - name: "Assign policies to {{ stackname }}-iam-role-admin-ec2 role"
    command: "aws iam attach-role-policy --policy-arn {{ CloudFormationAdditionalAccessJson.Policy.Arn }} --role-name {{ stackname }}-iam-role-admin-ec2"
    ignore_errors: true
  - command: "aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --role-name {{ stackname }}-iam-role-admin-ec2"
    ignore_errors: true
  - command: "aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess --role-name {{ stackname }}-iam-role-admin-ec2"
    ignore_errors: true
  - command: "aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonVPCFullAccess --role-name {{ stackname }}-iam-role-admin-ec2"
    ignore_errors: true
  - command: "aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonSNSFullAccess --role-name {{ stackname }}-iam-role-admin-ec2"
    ignore_errors: true
  - command: "aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/CloudWatchFullAccess --role-name {{ stackname }}-iam-role-admin-ec2"
    ignore_errors: true
  - command: "aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonRDSFullAccess --role-name {{ stackname }}-iam-role-admin-ec2"
    ignore_errors: true
  - command: "aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonElasticFileSystemFullAccess --role-name {{ stackname }}-iam-role-admin-ec2"
    ignore_errors: true
  - name: "Assign policies to {{ stackname }}-iam-role-utilities-ec2 role"
    command: "aws iam attach-role-policy --policy-arn {{ CloudWatchUploadJson.Policy.Arn }} --role-name {{ stackname }}-iam-role-utilities-ec2"
    ignore_errors: true
  - command: "aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/CloudWatchActionsEC2Access --role-name {{ stackname }}-iam-role-utilities-ec2"
    ignore_errors: true
  - name: "Assign policies to {{ stackname }}-iam-role-utilities-db role"
    command: "aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole --role-name {{ stackname }}-iam-role-utilities-db"
    ignore_errors: true
  - name: "Create {{ stackname }}-iam-role-admin-ec2 instance-profile"
    command: "aws iam create-instance-profile --instance-profile-name {{ stackname }}-iam-role-admin-ec2"
    ignore_errors: true
  - name: "Create {{ stackname }}-iam-role-utilities-ec2 instance-profile"
    command: "aws iam create-instance-profile --instance-profile-name {{ stackname }}-iam-role-utilities-ec2"
    ignore_errors: true
  - name: "Create {{ stackname }}-iam-role-utilities-db instance-profile"
    command: "aws iam create-instance-profile --instance-profile-name {{ stackname }}-iam-role-utilities-db"
    ignore_errors: true
  - name: "Assign {{ stackname }}-iam-role-admin-ec2 instance-profile to {{ stackname }}-iam-role-admin-ec2 role"
    command: "aws iam add-role-to-instance-profile --role-name {{ stackname }}-iam-role-admin-ec2 --instance-profile-name {{ stackname }}-iam-role-admin-ec2"
    ignore_errors: true
  - name: "Assign {{ stackname }}-iam-role-utilities-ec2 instance-profile to {{ stackname }}-iam-role-utilities-ec2 role"
    command: "aws iam add-role-to-instance-profile --role-name {{ stackname }}-iam-role-utilities-ec2 --instance-profile-name {{ stackname }}-iam-role-utilities-ec2"
    ignore_errors: true
  - name: "Assign {{ stackname }}-iam-role-utilities-db instance-profile to {{ stackname }}-iam-role-utilities-db role"
    command: "aws iam add-role-to-instance-profile --role-name {{ stackname }}-iam-role-utilities-db --instance-profile-name {{ stackname }}-iam-role-utilities-db"
    ignore_errors: true
  - name: "Get {{ stackname }}-iam-role-admin-ec2 role fact"
    command: "aws iam get-role --role-name {{ stackname }}-iam-role-admin-ec2"
    register: admin-ec2-fact
  - name: "Get {{ stackname }}-iam-role-utilities-ec2 role fact"
    command: "aws iam get-role --role-name {{ stackname }}-iam-role-utilities-ec2"
    register: utilities-ec2-fact
  - name: "Get {{ stackname }}-iam-role-utilities-db role fact"
    command: "aws iam get-role --role-name {{ stackname }}-iam-role-utilities-db"
    register: utilities-db-fact
  - debug:
      msg: "Value is {{ admin-ec2-fact }}"

#  - name: "Create a New Internal SSH Keypair"
#    ec2_key:
#      name: "{{ stackname }}-ec2-ssh-private"
#      region: "{{ region }}"
#    register: ssh_private
#  - name: "Save Private Key Locally"
#    copy:
#      content: "{{ ssh_private.key.private_key }}"
#      dest: "{{ playbook_dir }}/{{ stackname }}-ec2-ssh-private.pem"
#  - name: "Apply Final AWS Template"
#    cloudformation:
#      stack_name: "{{ stackname }}"
#      state: "present"
#      region: "{{ region }}"
#      template: "{{ playbook_dir }}/module_utils/admin-stack-final.json"
#      template_parameters:
#        BaseUtilityIP: "0.0.0.0/0"
#        BaseAdminExtIP: "0.0.0.0/0"
#        BaseAMI: "ami-0c34246f"
#        AdminEC2Role: "{{ stackname }}-iam-role-admin-ec2"
#        UtilitiesEC2Role: "{{ stackname }}-iam-role-utilities-ec2"
#        ExtKeyPair: "mywordpresssite-external"
#        IntKeyPair: "{{ stackname }}-ec2-ssh-private"
#        InfraAlertEmail: "{{ email }}"
#        AdminUsername: "{{ username }}"
#        AdminPassword: "{{ password }}"
#        StandardUsername: "{{ username }}"
#        StandardPassword: "{{ password }}"
#      tags:
#        Stack: "{{ stackname }}"